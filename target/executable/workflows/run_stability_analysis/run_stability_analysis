#!/usr/bin/env bash

# run_stability_analysis build_main
# 
# This wrapper script is auto-generated by viash 0.9.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="run_stability_analysis"
VIASH_META_FUNCTIONALITY_NAME="run_stability_analysis"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "run_stability_analysis build_main"
  echo ""
  echo "Inputs:"
  echo "    --sc_counts"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources/neurips-2023-raw/sc_counts.h5ad"
  echo ""
  echo "    --id"
  echo "        type: string, required parameter"
  echo "        Unique identifier of the dataset."
  echo ""
  echo "    --layer"
  echo "        type: string"
  echo "        default: clipped_sign_log10_pval"
  echo "        Which layer to use for prediction and evaluation."
  echo ""
  echo "Bootstrapping arguments:"
  echo "    Define the sampling strategy for the stability analysis."
  echo ""
  echo "    --bootstrap_num_replicates"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Number of bootstrap replicates to run."
  echo ""
  echo "    --bootstrap_obs"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether to sample observations."
  echo ""
  echo "    --bootstrap_obs_fraction"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Fraction of the obs of the sc_counts to include in each bootstrap."
  echo ""
  echo "    --bootstrap_obs_replace"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether to sample with replacement."
  echo ""
  echo "    --bootstrap_var"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Whether to sample variables."
  echo ""
  echo "    --bootstrap_var_fraction"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Fraction of the var of the sc_counts to include in each bootstrap."
  echo ""
  echo "    --bootstrap_var_replace"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Whether to sample with replacement."
  echo ""
  echo "Outputs:"
  echo "    --scores"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: stability_uns.yaml"
  echo "        A yaml file containing the scores of each of the methods"
  echo ""
  echo "Arguments:"
  echo "    --method_ids"
  echo "        type: string, multiple values allowed"
  echo "        A list of method ids to run. If not specified, all methods will be run."
  echo ""
  echo "    --metric_ids"
  echo "        type: string, multiple values allowed"
  echo "        A list of metric ids to run. If not specified, all metric will be run."
}

# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='native'

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "run_stability_analysis build_main"
            exit
            ;;
        --sc_counts)
            [ -n "$VIASH_PAR_SC_COUNTS" ] && ViashError Bad arguments for option \'--sc_counts\': \'$VIASH_PAR_SC_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SC_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --sc_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --sc_counts=*)
            [ -n "$VIASH_PAR_SC_COUNTS" ] && ViashError Bad arguments for option \'--sc_counts=*\': \'$VIASH_PAR_SC_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SC_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --id)
            [ -n "$VIASH_PAR_ID" ] && ViashError Bad arguments for option \'--id\': \'$VIASH_PAR_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id=*)
            [ -n "$VIASH_PAR_ID" ] && ViashError Bad arguments for option \'--id=*\': \'$VIASH_PAR_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --layer)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --layer=*)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer=*\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_num_replicates)
            [ -n "$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES" ] && ViashError Bad arguments for option \'--bootstrap_num_replicates\': \'$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_NUM_REPLICATES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_num_replicates. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_num_replicates=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES" ] && ViashError Bad arguments for option \'--bootstrap_num_replicates=*\': \'$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_NUM_REPLICATES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_obs)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS" ] && ViashError Bad arguments for option \'--bootstrap_obs\': \'$VIASH_PAR_BOOTSTRAP_OBS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_obs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_obs=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS" ] && ViashError Bad arguments for option \'--bootstrap_obs=*\': \'$VIASH_PAR_BOOTSTRAP_OBS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_obs_fraction)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS_FRACTION" ] && ViashError Bad arguments for option \'--bootstrap_obs_fraction\': \'$VIASH_PAR_BOOTSTRAP_OBS_FRACTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS_FRACTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_obs_fraction. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_obs_fraction=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS_FRACTION" ] && ViashError Bad arguments for option \'--bootstrap_obs_fraction=*\': \'$VIASH_PAR_BOOTSTRAP_OBS_FRACTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS_FRACTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_obs_replace)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS_REPLACE" ] && ViashError Bad arguments for option \'--bootstrap_obs_replace\': \'$VIASH_PAR_BOOTSTRAP_OBS_REPLACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS_REPLACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_obs_replace. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_obs_replace=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_OBS_REPLACE" ] && ViashError Bad arguments for option \'--bootstrap_obs_replace=*\': \'$VIASH_PAR_BOOTSTRAP_OBS_REPLACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_OBS_REPLACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_var)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR" ] && ViashError Bad arguments for option \'--bootstrap_var\': \'$VIASH_PAR_BOOTSTRAP_VAR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_var. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_var=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR" ] && ViashError Bad arguments for option \'--bootstrap_var=*\': \'$VIASH_PAR_BOOTSTRAP_VAR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_var_fraction)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR_FRACTION" ] && ViashError Bad arguments for option \'--bootstrap_var_fraction\': \'$VIASH_PAR_BOOTSTRAP_VAR_FRACTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR_FRACTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_var_fraction. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_var_fraction=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR_FRACTION" ] && ViashError Bad arguments for option \'--bootstrap_var_fraction=*\': \'$VIASH_PAR_BOOTSTRAP_VAR_FRACTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR_FRACTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bootstrap_var_replace)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR_REPLACE" ] && ViashError Bad arguments for option \'--bootstrap_var_replace\': \'$VIASH_PAR_BOOTSTRAP_VAR_REPLACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR_REPLACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --bootstrap_var_replace. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --bootstrap_var_replace=*)
            [ -n "$VIASH_PAR_BOOTSTRAP_VAR_REPLACE" ] && ViashError Bad arguments for option \'--bootstrap_var_replace=*\': \'$VIASH_PAR_BOOTSTRAP_VAR_REPLACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BOOTSTRAP_VAR_REPLACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --scores)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --scores. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scores=*)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores=*\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --method_ids)
            if [ -z "$VIASH_PAR_METHOD_IDS" ]; then
              VIASH_PAR_METHOD_IDS="$2"
            else
              VIASH_PAR_METHOD_IDS="$VIASH_PAR_METHOD_IDS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --method_ids. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --method_ids=*)
            if [ -z "$VIASH_PAR_METHOD_IDS" ]; then
              VIASH_PAR_METHOD_IDS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METHOD_IDS="$VIASH_PAR_METHOD_IDS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --metric_ids)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS="$2"
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metric_ids. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metric_ids=*)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  VIASH_ENGINE_TYPE='native'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: native."
  exit 1
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_SC_COUNTS+x} ]; then
  ViashError '--sc_counts' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ID+x} ]; then
  ViashError '--id' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_SCORES+x} ]; then
  ViashError '--scores' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_LAYER+x} ]; then
  VIASH_PAR_LAYER="clipped_sign_log10_pval"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_NUM_REPLICATES+x} ]; then
  VIASH_PAR_BOOTSTRAP_NUM_REPLICATES="10"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_OBS+x} ]; then
  VIASH_PAR_BOOTSTRAP_OBS="true"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_OBS_FRACTION+x} ]; then
  VIASH_PAR_BOOTSTRAP_OBS_FRACTION="1.0"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_OBS_REPLACE+x} ]; then
  VIASH_PAR_BOOTSTRAP_OBS_REPLACE="true"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_VAR+x} ]; then
  VIASH_PAR_BOOTSTRAP_VAR="false"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_VAR_FRACTION+x} ]; then
  VIASH_PAR_BOOTSTRAP_VAR_FRACTION="1.0"
fi
if [ -z ${VIASH_PAR_BOOTSTRAP_VAR_REPLACE+x} ]; then
  VIASH_PAR_BOOTSTRAP_VAR_REPLACE="true"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_SC_COUNTS" ] && [ ! -e "$VIASH_PAR_SC_COUNTS" ]; then
  ViashError "Input file '$VIASH_PAR_SC_COUNTS' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_NUM_REPLICATES" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--bootstrap_num_replicates' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_OBS" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_OBS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--bootstrap_obs' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_OBS_FRACTION" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_OBS_FRACTION" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--bootstrap_obs_fraction' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_OBS_REPLACE" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_OBS_REPLACE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--bootstrap_obs_replace' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_VAR" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_VAR" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--bootstrap_var' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_VAR_FRACTION" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_VAR_FRACTION" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--bootstrap_var_fraction' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_BOOTSTRAP_VAR_REPLACE" ]]; then
  if ! [[ "$VIASH_PAR_BOOTSTRAP_VAR_REPLACE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--bootstrap_var_replace' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -d "$(dirname "$VIASH_PAR_SCORES")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_SCORES")"
fi

if  [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  if [ "$VIASH_MODE" == "run" ]; then
    VIASH_CMD="bash"
  else
    ViashError "Engine '$VIASH_ENGINE_ID' does not support mode '$VIASH_MODE'."
    exit 1
  fi
fi


# set dependency paths
VIASH_DEP_PROCESS_DATASET_BOOTSTRAP="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/bootstrap/main.nf"
VIASH_DEP_WORKFLOWS_PROCESS_DATASET="$VIASH_META_RESOURCES_DIR/../../../nextflow/workflows/process_dataset/main.nf"
VIASH_DEP_WORKFLOWS_RUN_BENCHMARK="$VIASH_META_RESOURCES_DIR/../../../nextflow/workflows/run_benchmark/main.nf"

ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-run_stability_analysis-XXXXXX").nf
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
//// VIASH START
// The following code has been auto-generated by Viash.

//// VIASH END

// helper workflow for starting a workflow based on lists of yaml files
workflow auto {
  findStates(params, meta.config)
    | meta.workflow.run(
      auto: [publish: "state"]
    )
}

// benchmarking workflow
workflow run_wf {
  take:
  input_ch

  main:
  output_ch = input_ch

    // flatten bootstraps
    | flatMap { id, state -> 
      return (1..state.bootstrap_num_replicates).collect{ idx ->
        [
          "\${id}-bootstrap\${idx}",
          state + [
            replicate: idx,
            _meta: [join_id: id]
          ]
        ]
      }
    }

    | bootstrap.run(
      fromState: [
        input: "sc_counts",
        bootstrap_obs: "bootstrap_obs",
        obs_fraction: "bootstrap_obs_fraction",
        obs_replace: "bootstrap_obs_replace",
        bootstrap_var: "bootstrap_var",
        var_fraction: "bootstrap_var_fraction",
        var_replace: "bootstrap_var_replace"
      ],
      toState: [
        sc_counts: "output"
      ]
    )

    | process_dataset.run(
      fromState: {id, state ->
        [
          sc_counts: state.sc_counts,
          dataset_id: id,
          dataset_name: "/",
          dataset_url: "/",
          dataset_reference: "/",
          dataset_summary: "/",
          dataset_description: "/",
          dataset_organism: "/"
        ]
      },
      toState: [
        de_test: "de_test",
        de_train: "de_train",
        id_map: "id_map"
      ]
    )

    | run_benchmark.run(
      fromState: [
        de_train: "de_train",
        de_test: "de_test",
        id_map: "id_map",
        method_ids: "method_ids",
        metric_ids: "metric_ids",
        layer: "layer"
      ],
      toState: [
        scores: "scores"
      ]
    )

    | setState(["scores", "_meta"])

  emit:
  output_ch
}
VIASHMAIN
nextflow run . -main-script "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -e "$VIASH_PAR_SCORES" ]; then
  ViashError "Output file '$VIASH_PAR_SCORES' does not exist."
  exit 1
fi


exit 0
