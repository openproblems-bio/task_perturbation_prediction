#!/usr/bin/env bash

# process_dataset build_main
# 
# This wrapper script is auto-generated by viash 0.9.0-RC6 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="process_dataset"
VIASH_META_FUNCTIONALITY_NAME="process_dataset"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "process_dataset build_main"
  echo ""
  echo "Arguments:"
  echo "    --sc_counts"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources/neurips-2023-raw/sc_counts.h5ad"
  echo ""
  echo "    --de_train_h5ad"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: de_train.h5ad"
  echo "        example: resources/datasets/neurips-2023-data/de_train.h5ad"
  echo ""
  echo "    --de_test_h5ad"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: de_test.h5ad"
  echo "        example: resources/datasets/neurips-2023-data/de_test.h5ad"
  echo ""
  echo "    --id_map"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: id_map.csv"
  echo "        example: resources/datasets/neurips-2023-data/id_map.csv"
  echo ""
  echo "    --dataset_id"
  echo "        type: string, required parameter"
  echo "        Unique identifier of the dataset."
  echo ""
  echo "    --dataset_name"
  echo "        type: string, required parameter"
  echo "        Nicely formatted name."
  echo ""
  echo "    --dataset_url"
  echo "        type: string"
  echo "        Link to the original source of the dataset."
  echo ""
  echo "    --dataset_reference"
  echo "        type: string"
  echo "        Bibtex reference of the paper in which the dataset was published."
  echo ""
  echo "    --dataset_summary"
  echo "        type: string, required parameter"
  echo "        Short description of the dataset."
  echo ""
  echo "    --dataset_description"
  echo "        type: string, required parameter"
  echo "        Long description of the dataset."
  echo ""
  echo "    --dataset_organism"
  echo "        type: string, required parameter"
  echo "        The organism of the dataset."
}

# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='native'

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "process_dataset build_main"
            exit
            ;;
        --sc_counts)
            [ -n "$VIASH_PAR_SC_COUNTS" ] && ViashError Bad arguments for option \'--sc_counts\': \'$VIASH_PAR_SC_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SC_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --sc_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --sc_counts=*)
            [ -n "$VIASH_PAR_SC_COUNTS" ] && ViashError Bad arguments for option \'--sc_counts=*\': \'$VIASH_PAR_SC_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SC_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --de_train_h5ad)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_train_h5ad. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_train_h5ad=*)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad=*\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --de_test_h5ad)
            [ -n "$VIASH_PAR_DE_TEST_H5AD" ] && ViashError Bad arguments for option \'--de_test_h5ad\': \'$VIASH_PAR_DE_TEST_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TEST_H5AD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_test_h5ad. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_test_h5ad=*)
            [ -n "$VIASH_PAR_DE_TEST_H5AD" ] && ViashError Bad arguments for option \'--de_test_h5ad=*\': \'$VIASH_PAR_DE_TEST_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TEST_H5AD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --id_map)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id_map. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_map=*)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map=*\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_id)
            [ -n "$VIASH_PAR_DATASET_ID" ] && ViashError Bad arguments for option \'--dataset_id\': \'$VIASH_PAR_DATASET_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ID="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_id. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_id=*)
            [ -n "$VIASH_PAR_DATASET_ID" ] && ViashError Bad arguments for option \'--dataset_id=*\': \'$VIASH_PAR_DATASET_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_name)
            [ -n "$VIASH_PAR_DATASET_NAME" ] && ViashError Bad arguments for option \'--dataset_name\': \'$VIASH_PAR_DATASET_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_name. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_name=*)
            [ -n "$VIASH_PAR_DATASET_NAME" ] && ViashError Bad arguments for option \'--dataset_name=*\': \'$VIASH_PAR_DATASET_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_url)
            [ -n "$VIASH_PAR_DATASET_URL" ] && ViashError Bad arguments for option \'--dataset_url\': \'$VIASH_PAR_DATASET_URL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_URL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_url. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_url=*)
            [ -n "$VIASH_PAR_DATASET_URL" ] && ViashError Bad arguments for option \'--dataset_url=*\': \'$VIASH_PAR_DATASET_URL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_URL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_reference)
            [ -n "$VIASH_PAR_DATASET_REFERENCE" ] && ViashError Bad arguments for option \'--dataset_reference\': \'$VIASH_PAR_DATASET_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_REFERENCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_reference. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_reference=*)
            [ -n "$VIASH_PAR_DATASET_REFERENCE" ] && ViashError Bad arguments for option \'--dataset_reference=*\': \'$VIASH_PAR_DATASET_REFERENCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_summary)
            [ -n "$VIASH_PAR_DATASET_SUMMARY" ] && ViashError Bad arguments for option \'--dataset_summary\': \'$VIASH_PAR_DATASET_SUMMARY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_SUMMARY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_summary. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_summary=*)
            [ -n "$VIASH_PAR_DATASET_SUMMARY" ] && ViashError Bad arguments for option \'--dataset_summary=*\': \'$VIASH_PAR_DATASET_SUMMARY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_SUMMARY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_description)
            [ -n "$VIASH_PAR_DATASET_DESCRIPTION" ] && ViashError Bad arguments for option \'--dataset_description\': \'$VIASH_PAR_DATASET_DESCRIPTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_DESCRIPTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_description. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_description=*)
            [ -n "$VIASH_PAR_DATASET_DESCRIPTION" ] && ViashError Bad arguments for option \'--dataset_description=*\': \'$VIASH_PAR_DATASET_DESCRIPTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_DESCRIPTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_organism)
            [ -n "$VIASH_PAR_DATASET_ORGANISM" ] && ViashError Bad arguments for option \'--dataset_organism\': \'$VIASH_PAR_DATASET_ORGANISM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ORGANISM="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_organism. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_organism=*)
            [ -n "$VIASH_PAR_DATASET_ORGANISM" ] && ViashError Bad arguments for option \'--dataset_organism=*\': \'$VIASH_PAR_DATASET_ORGANISM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ORGANISM=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  VIASH_ENGINE_TYPE='native'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: native."
  exit 1
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_SC_COUNTS+x} ]; then
  ViashError '--sc_counts' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DE_TRAIN_H5AD+x} ]; then
  ViashError '--de_train_h5ad' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DE_TEST_H5AD+x} ]; then
  ViashError '--de_test_h5ad' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ID_MAP+x} ]; then
  ViashError '--id_map' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_ID+x} ]; then
  ViashError '--dataset_id' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_NAME+x} ]; then
  ViashError '--dataset_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_SUMMARY+x} ]; then
  ViashError '--dataset_summary' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_DESCRIPTION+x} ]; then
  ViashError '--dataset_description' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_ORGANISM+x} ]; then
  ViashError '--dataset_organism' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_SC_COUNTS" ] && [ ! -e "$VIASH_PAR_SC_COUNTS" ]; then
  ViashError "Input file '$VIASH_PAR_SC_COUNTS' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_DE_TRAIN_H5AD" ] && [ ! -d "$(dirname "$VIASH_PAR_DE_TRAIN_H5AD")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_DE_TRAIN_H5AD")"
fi
if [ ! -z "$VIASH_PAR_DE_TEST_H5AD" ] && [ ! -d "$(dirname "$VIASH_PAR_DE_TEST_H5AD")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_DE_TEST_H5AD")"
fi
if [ ! -z "$VIASH_PAR_ID_MAP" ] && [ ! -d "$(dirname "$VIASH_PAR_ID_MAP")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_ID_MAP")"
fi

if  [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  if [ "$VIASH_MODE" == "run" ]; then
    VIASH_CMD="bash"
  else
    ViashError "Engine '$VIASH_ENGINE_ID' does not support mode '$VIASH_MODE'."
    exit 1
  fi
fi


# set dependency paths
VIASH_DEP_PROCESS_DATASET_COMPUTE_PSEUDOBULK="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/compute_pseudobulk/main.nf"
VIASH_DEP_PROCESS_DATASET_FILTER_OBS="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/filter_obs/main.nf"
VIASH_DEP_PROCESS_DATASET_FILTER_VARS="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/filter_vars/main.nf"
VIASH_DEP_PROCESS_DATASET_ADD_UNS_METADATA="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/add_uns_metadata/main.nf"
VIASH_DEP_PROCESS_DATASET_RUN_LIMMA="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/run_limma/main.nf"
VIASH_DEP_PROCESS_DATASET_GENERATE_ID_MAP="$VIASH_META_RESOURCES_DIR/../../../nextflow/process_dataset/generate_id_map/main.nf"

ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-process_dataset-XXXXXX").nf
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
//// VIASH START
// The following code has been auto-generated by Viash.

//// VIASH END
workflow run_wf {
  take:
  input_ch

  main:
  output_ch = input_ch

    | filter_obs.run(
      fromState: [input: "sc_counts"],
      toState: [filtered_sc_counts: "output"]
    )

    | compute_pseudobulk.run(
      fromState: [input: "filtered_sc_counts"],
      toState: [pseudobulk: "output"]
    )

    | filter_vars.run(
      fromState: [input: "pseudobulk",],
      toState: [pseudobulk_filtered: "output"]
    )

    | add_uns_metadata.run(
      fromState: [
        input: "pseudobulk_filtered",
        dataset_id: "dataset_id",
        dataset_name: "dataset_name",
        dataset_summary: "dataset_summary",
        dataset_description: "dataset_description",
        dataset_url: "dataset_url",
        dataset_reference: "dataset_reference",
        dataset_organism: "dataset_organism"
      ],
      toState: [pseudobulk_filtered_with_uns: "output"]
    )

    | run_limma.run(
      key: "limma_train",
      fromState: { id, state ->
        [
          input: state.pseudobulk_filtered_with_uns,
          input_splits: ["train", "control", "public_test"],
          output_splits: ["train", "control", "public_test"]
        ]
      },
      toState: [de_train_h5ad: "output"]
    )

    | run_limma.run(
      key: "limma_test",
      fromState: { id, state ->
        [
          input: state.pseudobulk_filtered_with_uns,
          input_splits: ["train", "control", "public_test", "private_test"],
          output_splits: ["private_test"]
        ]
      },
      toState: [de_test_h5ad: "output"]
    )

    | generate_id_map.run(
      fromState: [de_test_h5ad: "de_test_h5ad"],
      toState: [id_map: "id_map"]
    )

    | setState([
      "de_train_h5ad",
      "de_test_h5ad",
      "id_map"
    ])

  emit:
  output_ch
}
VIASHMAIN
nextflow run . -main-script "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_DE_TRAIN_H5AD" ] && [ ! -e "$VIASH_PAR_DE_TRAIN_H5AD" ]; then
  ViashError "Output file '$VIASH_PAR_DE_TRAIN_H5AD' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_DE_TEST_H5AD" ] && [ ! -e "$VIASH_PAR_DE_TEST_H5AD" ]; then
  ViashError "Output file '$VIASH_PAR_DE_TEST_H5AD' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ID_MAP" ] && [ ! -e "$VIASH_PAR_ID_MAP" ]; then
  ViashError "Output file '$VIASH_PAR_ID_MAP' does not exist."
  exit 1
fi


exit 0
