#!/usr/bin/env bash

# run_benchmark build_main
# 
# This wrapper script is auto-generated by viash 0.9.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="run_benchmark"
VIASH_META_FUNCTIONALITY_NAME="run_benchmark"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "run_benchmark build_main"
  echo ""
  echo "Inputs:"
  echo "    --de_train_h5ad"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources/datasets/neurips-2023-data/de_train.h5ad"
  echo ""
  echo "    --de_test_h5ad"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources/datasets/neurips-2023-data/de_test.h5ad"
  echo ""
  echo "    --id_map"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources/datasets/neurips-2023-data/id_map.csv"
  echo ""
  echo "    --layer"
  echo "        type: string"
  echo "        default: clipped_sign_log10_pval"
  echo "        Which layer to use for prediction and evaluation."
  echo ""
  echo "Outputs:"
  echo "    --scores"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: score_uns.yaml"
  echo "        A yaml file containing the scores of each of the methods"
  echo ""
  echo "    --method_configs"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: method_configs.yaml"
  echo ""
  echo "    --metric_configs"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: metric_configs.yaml"
  echo ""
  echo "    --dataset_uns"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: dataset_uns.yaml"
  echo ""
  echo "    --task_info"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: task_info.yaml"
  echo ""
  echo "Arguments:"
  echo "    --method_ids"
  echo "        type: string, multiple values allowed"
  echo "        A list of method ids to run. If not specified, all methods will be run."
  echo ""
  echo "    --metric_ids"
  echo "        type: string, multiple values allowed"
  echo "        A list of metric ids to run. If not specified, all metric will be run."
}

# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='native'

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "run_benchmark build_main"
            exit
            ;;
        --de_train_h5ad)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_train_h5ad. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_train_h5ad=*)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad=*\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --de_test_h5ad)
            [ -n "$VIASH_PAR_DE_TEST_H5AD" ] && ViashError Bad arguments for option \'--de_test_h5ad\': \'$VIASH_PAR_DE_TEST_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TEST_H5AD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_test_h5ad. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_test_h5ad=*)
            [ -n "$VIASH_PAR_DE_TEST_H5AD" ] && ViashError Bad arguments for option \'--de_test_h5ad=*\': \'$VIASH_PAR_DE_TEST_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TEST_H5AD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --id_map)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id_map. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_map=*)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map=*\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --layer)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --layer=*)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer=*\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --scores)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --scores. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scores=*)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores=*\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --method_configs)
            [ -n "$VIASH_PAR_METHOD_CONFIGS" ] && ViashError Bad arguments for option \'--method_configs\': \'$VIASH_PAR_METHOD_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METHOD_CONFIGS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --method_configs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --method_configs=*)
            [ -n "$VIASH_PAR_METHOD_CONFIGS" ] && ViashError Bad arguments for option \'--method_configs=*\': \'$VIASH_PAR_METHOD_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METHOD_CONFIGS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --metric_configs)
            [ -n "$VIASH_PAR_METRIC_CONFIGS" ] && ViashError Bad arguments for option \'--metric_configs\': \'$VIASH_PAR_METRIC_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METRIC_CONFIGS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metric_configs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metric_configs=*)
            [ -n "$VIASH_PAR_METRIC_CONFIGS" ] && ViashError Bad arguments for option \'--metric_configs=*\': \'$VIASH_PAR_METRIC_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METRIC_CONFIGS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_uns)
            [ -n "$VIASH_PAR_DATASET_UNS" ] && ViashError Bad arguments for option \'--dataset_uns\': \'$VIASH_PAR_DATASET_UNS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_UNS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_uns. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_uns=*)
            [ -n "$VIASH_PAR_DATASET_UNS" ] && ViashError Bad arguments for option \'--dataset_uns=*\': \'$VIASH_PAR_DATASET_UNS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_UNS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --task_info)
            [ -n "$VIASH_PAR_TASK_INFO" ] && ViashError Bad arguments for option \'--task_info\': \'$VIASH_PAR_TASK_INFO\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TASK_INFO="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --task_info. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --task_info=*)
            [ -n "$VIASH_PAR_TASK_INFO" ] && ViashError Bad arguments for option \'--task_info=*\': \'$VIASH_PAR_TASK_INFO\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TASK_INFO=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --method_ids)
            if [ -z "$VIASH_PAR_METHOD_IDS" ]; then
              VIASH_PAR_METHOD_IDS="$2"
            else
              VIASH_PAR_METHOD_IDS="$VIASH_PAR_METHOD_IDS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --method_ids. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --method_ids=*)
            if [ -z "$VIASH_PAR_METHOD_IDS" ]; then
              VIASH_PAR_METHOD_IDS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METHOD_IDS="$VIASH_PAR_METHOD_IDS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --metric_ids)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS="$2"
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metric_ids. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metric_ids=*)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  VIASH_ENGINE_TYPE='native'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: native."
  exit 1
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_DE_TRAIN_H5AD+x} ]; then
  ViashError '--de_train_h5ad' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DE_TEST_H5AD+x} ]; then
  ViashError '--de_test_h5ad' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_ID_MAP+x} ]; then
  ViashError '--id_map' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_SCORES+x} ]; then
  ViashError '--scores' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_METHOD_CONFIGS+x} ]; then
  ViashError '--method_configs' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_METRIC_CONFIGS+x} ]; then
  ViashError '--metric_configs' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_DATASET_UNS+x} ]; then
  ViashError '--dataset_uns' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_TASK_INFO+x} ]; then
  ViashError '--task_info' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_LAYER+x} ]; then
  VIASH_PAR_LAYER="clipped_sign_log10_pval"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_DE_TRAIN_H5AD" ] && [ ! -e "$VIASH_PAR_DE_TRAIN_H5AD" ]; then
  ViashError "Input file '$VIASH_PAR_DE_TRAIN_H5AD' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_DE_TEST_H5AD" ] && [ ! -e "$VIASH_PAR_DE_TEST_H5AD" ]; then
  ViashError "Input file '$VIASH_PAR_DE_TEST_H5AD' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ID_MAP" ] && [ ! -e "$VIASH_PAR_ID_MAP" ]; then
  ViashError "Input file '$VIASH_PAR_ID_MAP' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -d "$(dirname "$VIASH_PAR_SCORES")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_SCORES")"
fi
if [ ! -z "$VIASH_PAR_METHOD_CONFIGS" ] && [ ! -d "$(dirname "$VIASH_PAR_METHOD_CONFIGS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_METHOD_CONFIGS")"
fi
if [ ! -z "$VIASH_PAR_METRIC_CONFIGS" ] && [ ! -d "$(dirname "$VIASH_PAR_METRIC_CONFIGS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_METRIC_CONFIGS")"
fi
if [ ! -z "$VIASH_PAR_DATASET_UNS" ] && [ ! -d "$(dirname "$VIASH_PAR_DATASET_UNS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_DATASET_UNS")"
fi
if [ ! -z "$VIASH_PAR_TASK_INFO" ] && [ ! -d "$(dirname "$VIASH_PAR_TASK_INFO")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_TASK_INFO")"
fi

if  [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  if [ "$VIASH_MODE" == "run" ]; then
    VIASH_CMD="bash"
  else
    ViashError "Engine '$VIASH_ENGINE_ID' does not support mode '$VIASH_MODE'."
    exit 1
  fi
fi


# set dependency paths
VIASH_DEP_CONTROL_METHODS_ZEROS="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/zeros/main.nf"
VIASH_DEP_CONTROL_METHODS_SAMPLE="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/sample/main.nf"
VIASH_DEP_CONTROL_METHODS_GROUND_TRUTH="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/ground_truth/main.nf"
VIASH_DEP_CONTROL_METHODS_MEAN_OUTCOME="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/mean_outcome/main.nf"
VIASH_DEP_CONTROL_METHODS_MEAN_ACROSS_CELLTYPES="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/mean_across_celltypes/main.nf"
VIASH_DEP_CONTROL_METHODS_MEAN_ACROSS_COMPOUNDS="$VIASH_META_RESOURCES_DIR/../../../nextflow/control_methods/mean_across_compounds/main.nf"
VIASH_DEP_METHODS_NN_RETRAINING_WITH_PSEUDOLABELS="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/nn_retraining_with_pseudolabels/main.nf"
VIASH_DEP_METHODS_SCAPE="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/scape/main.nf"
VIASH_DEP_METHODS_JN_AP_OP2="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/jn_ap_op2/main.nf"
VIASH_DEP_METHODS_LGC_ENSEMBLE="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/lgc_ensemble/main.nf"
VIASH_DEP_METHODS_TRANSFORMER_ENSEMBLE="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/transformer_ensemble/main.nf"
VIASH_DEP_METHODS_PYBOOST="$VIASH_META_RESOURCES_DIR/../../../nextflow/methods/pyboost/main.nf"
VIASH_DEP_METRICS_MEAN_ROWWISE_ERROR="$VIASH_META_RESOURCES_DIR/../../../nextflow/metrics/mean_rowwise_error/main.nf"
VIASH_DEP_METRICS_MEAN_ROWWISE_CORRELATION="$VIASH_META_RESOURCES_DIR/../../../nextflow/metrics/mean_rowwise_correlation/main.nf"
VIASH_DEP_COMMON_EXTRACT_METADATA="$VIASH_TARGET_DIR/dependencies/github/openproblems-bio/openproblems/main_build/nextflow/common/extract_metadata/extract_metadata"

ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-run_benchmark-XXXXXX").nf
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
//// VIASH START
// The following code has been auto-generated by Viash.

//// VIASH END
// construct list of methods
methods = [
  ground_truth,
  mean_outcome,
  mean_across_celltypes,
  mean_across_compounds,
  sample,
  zeros,
  lgc_ensemble,
  nn_retraining_with_pseudolabels,
  jn_ap_op2,
  scape,
  transformer_ensemble,
  pyboost
]

// construct list of metrics
metrics = [
  mean_rowwise_error,
  mean_rowwise_correlation
]

// helper workflow for starting a workflow based on lists of yaml files
workflow auto {
  findStates(params, meta.config)
    | meta.workflow.run(
      auto: [publish: "state"]
    )
}

// benchmarking workflow
workflow run_wf {
  take:
  input_ch

  main:

  /***************************
   * RUN METHODS AND METRICS *
   ***************************/
  score_ch = input_ch

    | run_benchmark_fun(
      methods: methods,
      metrics: metrics,
      methodFromState: { id, state, comp ->
        def new_args = [
          de_train_h5ad: state.de_train_h5ad,
          id_map: state.id_map,
          layer: state.layer,
          output: 'predictions/\$id.\$key.output.h5ad',
          output_model: null
        ]
        if (comp.config.functionality.info.type == "control_method") {
          new_args.de_test_h5ad = state.de_test_h5ad
        }
        new_args
      },
      methodToState: ["prediction": "output"],
      metricFromState: [
        de_test_h5ad: "de_test_h5ad",
        de_test_layer: "layer",
        prediction: "prediction"
      ],
      metricToState: ["metric_output": "output"],
      methodAuto: [publish: "state"]
    )
    | joinStates { ids, states ->
      def score_uns = states.collect{it.score_uns}
      def score_uns_yaml_blob = toYamlBlob(score_uns)
      def score_uns_file = tempFile("score_uns.yaml")
      score_uns_file.write(score_uns_yaml_blob)
      
      ["output", [scores: score_uns_file]]
    }

  /******************************
   * GENERATE OUTPUT YAML FILES *
   ******************************/
  // create dataset, method and metric metadata files
  metadata_ch = input_ch
    | create_metadata_files(
      datasetFromState: [input: "de_train_h5ad"],
      methods: methods,
      metrics: metrics,
      meta: meta
    )

  // merge all of the output data 
  output_ch = score_ch
    | mix(metadata_ch)
    | joinStates{ ids, states ->
      def mergedStates = states.inject([:]) { acc, m -> acc + m }
      [ids[0], mergedStates]
    }

  emit:
  output_ch
}





def run_benchmark_fun(args) {
  // required args
  def methods_ = args.methods
  def metrics_ = args.metrics
  def methodFromState = args.methodFromState
  def methodToState = args.methodToState
  def metricFromState = args.metricFromState
  def metricToState = args.metricToState

  assert methods_, "methods must be defined"
  assert metrics_, "metrics must be defined"
  assert methodFromState, "methodFromState must be defined"
  assert methodToState, "methodToState must be defined"
  assert metricFromState, "metricFromState must be defined"
  assert metricToState, "metricToState must be defined"

  // optional args
  def keyPrefix = args.keyPrefix ?: ""
  def methodAuto = args.methodAuto ?: [:]
  def metricAuto = args.metricAuto ?: [:]

  // add the key prefix to the method and metric names
  if (keyPrefix && keyPrefix != "") {
    methods_ = methods.collect{ method ->
      method.run(key: keyPrefix + method.config.functionality.name)
    }
    metrics_ = metrics.collect{ metric ->
      metric.run(key: keyPrefix + metric.config.functionality.name)
    }
  }

  workflow bench {
    take: input_ch

    main:
    output_ch = input_ch
      // run all methods
      | runEach(
        components: methods_,
        filter: { id, state, comp ->
          !state.method_ids || state.method_ids.contains(comp.config.functionality.name)
        },
        id: { id, state, comp ->
          id + "." + comp.config.functionality.name
        },
        fromState: methodFromState,
        toState: methodToState,
        auto: methodAuto
      )

      // run all metrics
      | runEach(
        components: metrics_,
        filter: { id, state, comp ->
          !state.metric_ids || state.metric_ids.contains(comp.config.functionality.name)
        },
        id: { id, state, comp ->
          id + "." + comp.config.functionality.name
        },
        fromState: metricFromState,
        toState: metricToState,
        auto: metricAuto
      )

      // extract the scores
      | extract_metadata.run(
        key: "\${keyPrefix}score_uns",
        fromState: [input: "metric_output"],
        toState: { id, output, state ->
          state + [
            score_uns: readYaml(output.output).uns
          ]
        }
      )

    emit: output_ch
  }
  return bench
}


def create_metadata_files(args) {
  // required args
  def meta_ = args.meta
  def methods_ = args.methods
  def metrics_ = args.metrics
  def datasetFromState = args.datasetFromState

  assert meta_, "meta must be defined"
  assert methods_, "methods must be defined"
  assert metrics_, "metrics must be defined"
  assert datasetFromState, "datasetFromState must be defined"

  workflow metadata {
    take: input_ch

    main:
    output_ch = input_ch

      | map{ id, state ->
        [id, state + ["_meta": [join_id: id]]]
      }

      | extract_metadata.run(
        key: "dataset_uns",
        fromState: args.datasetFromState,
        toState: { id, output, state ->
          state + [
            dataset_info: readYaml(output.output).uns
          ]
        }
      )
    
      | joinStates { ids, states ->
        assert states.size() > 0, "no states found"
        assert states[0]._meta, "no _meta found in state[0]"
        assert states.every{it.dataset_info}, "not all states have dataset_info"

        // combine the dataset info into one file
        def dataset_uns = states.collect{it.dataset_info}
        def dataset_uns_yaml_blob = toYamlBlob(dataset_uns)
        def dataset_uns_file = tempFile("dataset_uns.yaml")
        dataset_uns_file.write(dataset_uns_yaml_blob)

        // store the method configs in a file
        def method_configs = methods_.collect{it.config}
        def method_configs_yaml_blob = toYamlBlob(method_configs)
        def method_configs_file = tempFile("method_configs.yaml")
        method_configs_file.write(method_configs_yaml_blob)

        // store the metric configs in a file
        def metric_configs = metrics_.collect{it.config}
        def metric_configs_yaml_blob = toYamlBlob(metric_configs)
        def metric_configs_file = tempFile("metric_configs.yaml")
        metric_configs_file.write(metric_configs_yaml_blob)

        def task_info_file = meta_.resources_dir.resolve("_viash.yaml")

        def new_state = [
          dataset_uns: dataset_uns_file,
          method_configs: method_configs_file,
          metric_configs: metric_configs_file,
          task_info: task_info_file,
          _meta: states[0]._meta
        ]
        ["output", new_state]
      }
    emit: output_ch
  }
  return metadata
}
VIASHMAIN
nextflow run . -main-script "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -e "$VIASH_PAR_SCORES" ]; then
  ViashError "Output file '$VIASH_PAR_SCORES' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_METHOD_CONFIGS" ] && [ ! -e "$VIASH_PAR_METHOD_CONFIGS" ]; then
  ViashError "Output file '$VIASH_PAR_METHOD_CONFIGS' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_METRIC_CONFIGS" ] && [ ! -e "$VIASH_PAR_METRIC_CONFIGS" ]; then
  ViashError "Output file '$VIASH_PAR_METRIC_CONFIGS' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_DATASET_UNS" ] && [ ! -e "$VIASH_PAR_DATASET_UNS" ]; then
  ViashError "Output file '$VIASH_PAR_DATASET_UNS' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_TASK_INFO" ] && [ ! -e "$VIASH_PAR_TASK_INFO" ]; then
  ViashError "Output file '$VIASH_PAR_TASK_INFO' does not exist."
  exit 1
fi


exit 0
