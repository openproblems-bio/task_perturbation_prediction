__merge__: ../../api/comp_method.yaml

name: nn_retraining_with_pseudolabels
info:
  label: NN retraining with pseudolabels
  neurips2023_rank: 3
  summary: Neural networks with pseudolabeling and ensemble modelling
  description: |
    The prediction system is two staged, so I publish two versions of the notebook.
    The first stage predicts pseudolabels. To be honest, if I stopped on this version, I would not be the third.
    The predicted pseudolabels on all test data (255 rows) are added to training in the second stage.
    
    **Stage 1 preparing pseudolabels**: The main part of this system is a neural network. Every neural network and its environment was optimized by optuna. Hyperparameters that have been optimized:
    a dropout value, a number of neurons in particular layers, an output dimension of an embedding layer, a number of epochs, a learning rate, a batch size, a number of dimension of truncated singular value decomposition.
    The optimization was done on custom 4-folds cross validation. In order to avoid overfitting to cross validation by optuna I applied 2 repeats for every fold and took an average. Generally, the more, the better. The optuna's criterion was MRRMSE.
    Finally, 7 models were ensembled. Optuna was applied again to determine best weights of linear combination. The prediction of test set is the pseudolabels now and will be used in second stage.
    
    **Stage 2 retraining with pseudolabels**: The pseudolabels (255 rows) were added to the training dataset. I applied 20 models with optimized parameters in different experiments for a model diversity.
    Optuna selected optimal weights for the linear combination of the prediction again.
    Models had high variance, so every model was trained 10 times on all dataset and the median of prediction is taken as a final prediction. The prediction was additionally clipped to colwise min and max. 
  reference: null
  documentation_url: https://www.kaggle.com/competitions/open-problems-single-cell-perturbations/discussion/458750
  repository_url: https://github.com/okon2000/single_cell_perturbations

arguments:
  - type: integer
    name: --reps
    default: 10
    description: "Number of repetitions to train the model."
    info:
      # use only 1 rep during unit tests
      test_default: 1

resources:
  - type: python_script
    path: script.py
  - path: notebook_264.py
  - path: notebook_266.py
  - path: ../../utils/anndata_to_dataframe.py

engines:
  - type: docker
    image: nvcr.io/nvidia/tensorflow:24.03-tf2-py3
    setup:
      - type: apt
        packages:
          - procps
      - type: python
        packages:
          - anndata~=0.8.0
          - scanpy
          - pyyaml
          - requests
          - jsonschema
      - type: python
        packages: 
          - scikit-learn==1.3.2
          - fastparquet

  - type: native
runners:
  - type: executable
  - type: nextflow
    directives:
      label: [ hightime, midmem, highcpu, gpu, midsharedmem ]
